#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#if WINDOWS
#include <Windows.h>
#include <unistd.h>
#include <fcntl.h>
#else
#include <dlfcn.h>
#include <sys/mman.h>
#endif
#include <vector>
#include <map>
#include "bigint/BigIntegerLibrary.hh"
#include "sha1.h"
#include "aes.h"
#include <sys/sysctl.h>
using namespace std;

#define error(args...) { fprintf(stderr, "ERROR: "); fprintf(stderr, ## args); fflush(stderr); exit(1); }
#define log(args...) { fprintf(stderr, ## args); fflush(stderr); }
typedef unsigned char byte;

uint64_t msec() {
#if WINDOWS
  LARGE_INTEGER frequency;
  LARGE_INTEGER value;
  QueryPerformanceFrequency(&frequency);
  QueryPerformanceCounter(&value);
  return (int)(value.QuadPart * 1000.0 / frequency.QuadPart);
#else
  return (int)(clock() * 1000.0 / CLOCKS_PER_SEC);
#endif
}

// Construct a big integer from a big-endian byte array.
static BigUnsigned bigFromBuf(const byte *buf, int n) {
  BigUnsigned r(0);
  for (int i = 0; i < n; i++) {
    r <<= 8;
    r += buf[i];
  }
  return r;
}
// Convert a big integer to a big-endian byte array.
static void bigToBuf(BigUnsigned v, byte *buf, int n) {
  for (int i = n - 1; i >= 0; i--) {
    buf[i] = (v & 0xFF).toInt();
    v >>= 8;
  }
}

#if WINDOWS

const int iTunesCertLen = 0x367;
const byte iTunesCert[iTunesCertLen] = {
  0x30, 0x82, 0x03, 0x63, 0x30, 0x82, 0x02, 0xcc, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0d, 0x33,
  0x33, 0xaf, 0x10, 0x05, 0x26, 0xaf, 0x00, 0x03, 0xaf, 0x00, 0x00, 0x01, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x7f, 0x31, 0x0b, 0x30,
  0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03,
  0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
  0x26, 0x30, 0x24, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20,
  0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75,
  0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x33, 0x30, 0x31, 0x06, 0x03, 0x55, 0x04, 0x03,
  0x13, 0x2a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79,
  0x20, 0x41, 0x41, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
  0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d,
  0x31, 0x30, 0x30, 0x35, 0x32, 0x36, 0x30, 0x35, 0x30, 0x30, 0x32, 0x31, 0x5a, 0x17, 0x0d, 0x31,
  0x35, 0x30, 0x35, 0x32, 0x35, 0x30, 0x35, 0x30, 0x30, 0x32, 0x31, 0x5a, 0x30, 0x6a, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06,
  0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e,
  0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x65,
  0x20, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x31, 0x2d, 0x30, 0x2b, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x13, 0x24, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x33, 0x33,
  0x33, 0x33, 0x41, 0x46, 0x31, 0x30, 0x30, 0x35, 0x32, 0x36, 0x41, 0x46, 0x30, 0x30, 0x30, 0x33,
  0x41, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81,
  0x89, 0x02, 0x81, 0x81, 0x00, 0xc1, 0x76, 0x48, 0xb5, 0xb3, 0x5c, 0xaf, 0x74, 0x9e, 0x3d, 0xde,
  0xc3, 0x0a, 0xfb, 0x77, 0x35, 0xd0, 0x14, 0x5b, 0x5b, 0x77, 0x37, 0x85, 0x29, 0xc8, 0x9d, 0x90,
  0xce, 0x2c, 0x2a, 0x7c, 0x63, 0xa5, 0x7b, 0xc8, 0x5e, 0xe5, 0x43, 0xae, 0xf1, 0x7d, 0x91, 0x01,
  0x10, 0x4e, 0x23, 0x58, 0xbf, 0x40, 0x1b, 0x7c, 0x3d, 0xc7, 0xd5, 0xaf, 0xc0, 0xf6, 0xf7, 0xe1,
  0xae, 0xe0, 0xe0, 0xbf, 0xd0, 0x3f, 0xc7, 0x44, 0x37, 0xb6, 0x84, 0xf6, 0xdc, 0xb3, 0x2d, 0x7c,
  0x0a, 0xf2, 0xea, 0x6c, 0x38, 0xd2, 0x3c, 0xa2, 0x28, 0x10, 0x45, 0x45, 0xd7, 0x28, 0x07, 0x58,
  0x4b, 0x9b, 0x5a, 0xcc, 0x9d, 0x22, 0x9c, 0xe8, 0x68, 0xf7, 0x33, 0xd7, 0x03, 0x1c, 0x8a, 0x79,
  0xbc, 0xd4, 0x72, 0x4d, 0x8e, 0xd8, 0x5c, 0x52, 0x19, 0x29, 0xf3, 0x84, 0x2c, 0x02, 0x9b, 0xb0,
  0x9c, 0xb6, 0x3f, 0xf8, 0xa5, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xf7, 0x30, 0x81, 0xf4,
  0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x03, 0xb8,
  0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d,
  0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x53, 0xc9, 0x40, 0x31, 0xc1, 0x42, 0x9a,
  0x49, 0x56, 0x4d, 0x82, 0xd0, 0x56, 0xde, 0x5f, 0x18, 0x5f, 0x6c, 0x58, 0xb2, 0x30, 0x1f, 0x06,
  0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x56, 0xd9, 0x1d, 0x0a, 0x8c, 0x1b,
  0x4e, 0xc8, 0x00, 0x8c, 0x59, 0x51, 0x65, 0xbe, 0x9f, 0x9c, 0xa3, 0xe4, 0x2b, 0xf0, 0x30, 0x81,
  0x93, 0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x07, 0x01, 0x02, 0x04, 0x81, 0x84,
  0x00, 0x00, 0x00, 0x01, 0x71, 0x12, 0x9b, 0x0b, 0xfa, 0x36, 0xcc, 0x8e, 0x66, 0xfa, 0x6d, 0x20,
  0xa9, 0x14, 0x86, 0x47, 0x66, 0xeb, 0x88, 0x80, 0x5c, 0xe7, 0x27, 0xbe, 0xa4, 0x58, 0xf6, 0x19,
  0x88, 0x72, 0xcb, 0xad, 0x86, 0xad, 0xbd, 0x76, 0x3a, 0x44, 0x65, 0x6b, 0x91, 0xf4, 0x27, 0xdf,
  0xfc, 0x42, 0x1c, 0x38, 0xcf, 0x56, 0x4f, 0xd2, 0xa1, 0xb6, 0xb0, 0x3a, 0x16, 0x44, 0xbd, 0xc1,
  0xcd, 0xa4, 0xb2, 0x84, 0x46, 0xc3, 0x96, 0x10, 0xf4, 0x41, 0x9e, 0x34, 0x8b, 0xc1, 0xe3, 0x9d,
  0xe8, 0xc8, 0x7e, 0xdd, 0x3a, 0x8e, 0x6c, 0x09, 0x25, 0xc3, 0x4c, 0xe1, 0x15, 0x63, 0xf8, 0x3b,
  0xad, 0xef, 0xdd, 0x69, 0xba, 0xe5, 0xe0, 0x61, 0xe0, 0x2f, 0xb9, 0x55, 0x4a, 0x74, 0x42, 0x4f,
  0x72, 0x69, 0x4d, 0x76, 0xaa, 0x95, 0x45, 0x54, 0x48, 0x92, 0xb6, 0x91, 0x27, 0x5f, 0xac, 0x1c,
  0x3f, 0xe4, 0x46, 0xac, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x05, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x9d, 0x85, 0x2c, 0x25, 0xb1, 0xe2, 0x1d, 0xff, 0x50,
  0x54, 0x23, 0x33, 0x20, 0x75, 0xd5, 0x2a, 0x0d, 0xbc, 0x77, 0x00, 0x74, 0x61, 0x04, 0x06, 0x2f,
  0x76, 0x92, 0xa3, 0x7a, 0xf5, 0x0a, 0x01, 0x9b, 0xfe, 0x82, 0x93, 0x0c, 0x1f, 0x27, 0x79, 0x3b,
  0x70, 0xa0, 0xda, 0xd6, 0xdf, 0x9f, 0x81, 0x80, 0xef, 0x5d, 0x2c, 0xc8, 0x93, 0xea, 0xa2, 0x0b,
  0x90, 0x6a, 0xd2, 0x4b, 0x4b, 0x78, 0x72, 0x9b, 0x49, 0xa2, 0xdc, 0xb3, 0xfb, 0xe1, 0x5c, 0x6f,
  0x2e, 0x59, 0x6b, 0x5e, 0x06, 0x6d, 0x55, 0x3d, 0x0f, 0x15, 0x4e, 0x16, 0x66, 0xfb, 0x8f, 0xa8,
  0xd6, 0x92, 0xc2, 0xb8, 0xbe, 0xe9, 0x92, 0xad, 0x60, 0x0e, 0xa5, 0x90, 0xc7, 0xf2, 0x4e, 0x25,
  0xe7, 0x26, 0x3d, 0xbc, 0xda, 0x84, 0xa7, 0x9f, 0xac, 0xdd, 0x6a, 0x03, 0xf6, 0xbe, 0x55, 0xec,
  0x40, 0xed, 0xc8, 0x97, 0x5c, 0xda, 0xc7,
};

const byte *iTunesPublicKey_N = &iTunesCert[0x155];

const byte iTunesPrivateKey_D[128] = {
  0xa4, 0xf5, 0x3f, 0xb0, 0x36, 0xdc, 0xdb, 0xfa, 0x7b, 0x07, 0x54, 0x4f, 0x48, 0xa8, 0xfc, 0x8f,
  0xd4, 0xf9, 0xd6, 0xa0, 0x19, 0xfa, 0x2c, 0x40, 0x61, 0x80, 0x00, 0xbd, 0xdb, 0xa8, 0xea, 0x61,
  0x68, 0xf4, 0x2f, 0xf8, 0xc2, 0x52, 0x40, 0xf4, 0x46, 0xd6, 0x02, 0x6b, 0x2d, 0xc5, 0x33, 0xe1,
  0xf7, 0x3e, 0xb8, 0x64, 0x51, 0x65, 0xa2, 0x33, 0xce, 0x21, 0xb4, 0xbc, 0x91, 0xa0, 0xf1, 0xcb,
  0x97, 0xf5, 0x79, 0xa2, 0xfa, 0x77, 0x99, 0xfe, 0x38, 0x10, 0x54, 0xcb, 0xdb, 0x8b, 0x93, 0xc3,
  0x4c, 0x11, 0x26, 0x33, 0x31, 0xc7, 0x30, 0x44, 0x4e, 0x36, 0xb3, 0xac, 0x43, 0x9a, 0x1c, 0x04,
  0x2d, 0x3c, 0x2d, 0xcf, 0x4f, 0xdb, 0xad, 0x3c, 0x3a, 0xbf, 0x94, 0x65, 0x52, 0xeb, 0x2a, 0xa5,
  0x56, 0xc1, 0x66, 0x04, 0xe0, 0xbf, 0x86, 0x1e, 0x98, 0xc9, 0x01, 0x74, 0xbe, 0x98, 0xdc, 0x21,
};

#else

const int iTunesCertLen = 0x428;
const byte iTunesCert[iTunesCertLen] = {
  0x30, 0x82, 0x04, 0x24, 0x30, 0x82, 0x03, 0x8d, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0d, 0x33,
  0x33, 0xaf, 0x11, 0x05, 0x06, 0xaf, 0x00, 0x02, 0xaf, 0x00, 0x00, 0x01, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x7f, 0x31, 0x0b, 0x30,
  0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03,
  0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
  0x26, 0x30, 0x24, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20,
  0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75,
  0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x33, 0x30, 0x31, 0x06, 0x03, 0x55, 0x04, 0x03,
  0x13, 0x2a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79,
  0x20, 0x41, 0x41, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
  0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d,
  0x31, 0x31, 0x30, 0x35, 0x30, 0x36, 0x30, 0x31, 0x31, 0x33, 0x31, 0x39, 0x5a, 0x17, 0x0d, 0x31,
  0x36, 0x30, 0x35, 0x30, 0x34, 0x30, 0x31, 0x31, 0x33, 0x31, 0x39, 0x5a, 0x30, 0x67, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06,
  0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e,
  0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x65,
  0x20, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x31, 0x2a, 0x30, 0x28, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x13, 0x21, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x2e, 0x33, 0x33, 0x33, 0x33, 0x41,
  0x46, 0x31, 0x31, 0x30, 0x35, 0x30, 0x36, 0x41, 0x46, 0x30, 0x30, 0x30, 0x32, 0x41, 0x46, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
  0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81,
  0x81, 0x00, 0xbe, 0x72, 0xc9, 0x01, 0x90, 0xdd, 0xde, 0x88, 0x4f, 0xb5, 0x65, 0x8a, 0xf3, 0x8e,
  0xc7, 0x76, 0x73, 0x6a, 0x06, 0xe0, 0xdb, 0x51, 0x8e, 0xdb, 0xf6, 0x4b, 0x43, 0x97, 0xd0, 0xf2,
  0x1a, 0x16, 0xb8, 0x74, 0xf2, 0xb5, 0x80, 0x11, 0xdf, 0x02, 0x39, 0x74, 0x0c, 0x68, 0xca, 0xdd,
  0xfb, 0xdb, 0xc7, 0xfb, 0xc0, 0x22, 0x98, 0x75, 0x97, 0x86, 0x12, 0xf2, 0x7d, 0x76, 0x46, 0x3a,
  0xe3, 0x5a, 0x8b, 0x9c, 0x56, 0x03, 0x97, 0xcf, 0x6d, 0xa6, 0x45, 0x5e, 0x23, 0x93, 0xe5, 0x3b,
  0x85, 0x87, 0x0e, 0x81, 0xd9, 0x92, 0xec, 0xd4, 0x4d, 0x44, 0x9b, 0x8a, 0xfd, 0xdb, 0x23, 0x20,
  0xe5, 0x9e, 0xd3, 0x83, 0x3e, 0xf5, 0x45, 0xcd, 0xa0, 0xd9, 0x70, 0x00, 0x23, 0xcd, 0x91, 0xe3,
  0xd6, 0x67, 0x1d, 0xd6, 0xe4, 0x0a, 0x89, 0x44, 0x8e, 0x63, 0xae, 0xbb, 0x85, 0x8d, 0x5c, 0xd6,
  0x42, 0xdd, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0xba, 0x30, 0x82, 0x01, 0xb6, 0x30,
  0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x03, 0xb8, 0x30,
  0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06,
  0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xcc, 0x72, 0xcb, 0xfc, 0x82, 0x7b, 0xea, 0x07,
  0x06, 0xca, 0x4d, 0x5e, 0xb0, 0x7a, 0x6a, 0x69, 0xf9, 0x2c, 0x84, 0xa6, 0x30, 0x1f, 0x06, 0x03,
  0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x56, 0xd9, 0x1d, 0x0a, 0x8c, 0x1b, 0x4e,
  0xc8, 0x00, 0x8c, 0x59, 0x51, 0x65, 0xbe, 0x9f, 0x9c, 0xa3, 0xe4, 0x2b, 0xf0, 0x30, 0x82, 0x01,
  0x54, 0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x07, 0x01, 0x02, 0x04, 0x82, 0x01,
  0x44, 0x00, 0x00, 0x00, 0x01, 0x09, 0xdc, 0x30, 0xb0, 0x13, 0x5b, 0xab, 0x3f, 0x13, 0x5d, 0xe3,
  0x45, 0x15, 0x47, 0x8f, 0x41, 0x15, 0x63, 0xf8, 0x3b, 0x16, 0x94, 0x69, 0x2a, 0x19, 0x47, 0xb1,
  0xf3, 0x1a, 0x61, 0x96, 0x47, 0x1b, 0xfe, 0xd9, 0x0b, 0x1f, 0xd3, 0x85, 0x92, 0x24, 0x20, 0xce,
  0x1d, 0x27, 0xfb, 0xdb, 0x6b, 0x2b, 0x5c, 0xf4, 0xf9, 0x2e, 0x30, 0x41, 0x54, 0x2f, 0x78, 0x1e,
  0xd4, 0x3a, 0x44, 0x65, 0x6b, 0x3f, 0xe4, 0x46, 0xac, 0x40, 0xae, 0x80, 0x63, 0x44, 0x96, 0x1c,
  0x21, 0x46, 0xc3, 0x96, 0x10, 0x46, 0xf7, 0xb8, 0xf6, 0x48, 0x92, 0xb6, 0x91, 0x4a, 0x74, 0x42,
  0x4f, 0x4b, 0x44, 0x71, 0x42, 0x50, 0x7c, 0x41, 0x97, 0x51, 0xbd, 0x2e, 0x4f, 0x52, 0xce, 0x54,
  0x2b, 0x53, 0xba, 0x39, 0x63, 0x5b, 0xa9, 0x9d, 0x93, 0x5c, 0x10, 0xc8, 0x73, 0x5c, 0xe4, 0x6c,
  0xe9, 0x5c, 0xe7, 0x27, 0xbe, 0x5d, 0xfb, 0x9f, 0xa1, 0x5f, 0x39, 0xc8, 0xe0, 0x62, 0x9b, 0xb2,
  0x70, 0x66, 0xfa, 0x6d, 0x20, 0x6b, 0xe9, 0x55, 0x35, 0x6c, 0xce, 0x7f, 0xc0, 0x70, 0xd1, 0xe0,
  0x55, 0x72, 0x69, 0x4d, 0x76, 0x80, 0x9f, 0xc3, 0xfc, 0x86, 0xad, 0xbd, 0x76, 0x88, 0x2c, 0x65,
  0x9b, 0x88, 0x72, 0xcb, 0xad, 0x8c, 0x2c, 0xce, 0x9c, 0x91, 0xf4, 0x27, 0xdf, 0xa2, 0x64, 0xf0,
  0xc1, 0xa2, 0x93, 0xe1, 0xa0, 0xa3, 0xe5, 0x37, 0x7e, 0xa5, 0x36, 0xdf, 0xee, 0xa5, 0xf3, 0x3c,
  0x3e, 0xa9, 0x14, 0x86, 0x47, 0xaa, 0x95, 0x45, 0x54, 0xab, 0xc5, 0xfa, 0x16, 0xb4, 0x96, 0xbd,
  0xc1, 0xb5, 0x65, 0x8e, 0xd7, 0xbb, 0x43, 0x60, 0xc2, 0xbc, 0x76, 0x23, 0x9a, 0xc4, 0xa3, 0x43,
  0x32, 0xc6, 0xb2, 0x8c, 0xd7, 0xc7, 0xed, 0x79, 0x51, 0xc9, 0x13, 0xbf, 0x87, 0xcb, 0xb6, 0x3e,
  0x38, 0xcc, 0x46, 0xf7, 0xa0, 0xcd, 0x75, 0x2c, 0xf5, 0xcd, 0xa4, 0xb2, 0x84, 0xd0, 0x66, 0x8f,
  0x66, 0xd1, 0x3f, 0xe0, 0x45, 0xd1, 0xb5, 0xc2, 0x24, 0xd3, 0x69, 0x6e, 0x94, 0xd4, 0x83, 0x31,
  0x44, 0xd4, 0xf5, 0xf8, 0xf5, 0xe0, 0xe0, 0xf2, 0x9f, 0xe2, 0x18, 0x18, 0x64, 0xe4, 0x73, 0x0c,
  0xe5, 0xe9, 0xf6, 0x53, 0xe1, 0xed, 0x9f, 0x97, 0xd3, 0xed, 0xe4, 0xd3, 0x8e, 0xf4, 0x41, 0x9e,
  0x34, 0xfa, 0xf7, 0x22, 0x97, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
  0x01, 0x05, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x3e, 0x6d, 0x99, 0x7e, 0xed, 0xc2, 0x69, 0x54,
  0x37, 0x35, 0xd5, 0x88, 0x17, 0x66, 0x7c, 0xc6, 0xf9, 0x13, 0x56, 0x1a, 0xe3, 0x9c, 0x7a, 0xa8,
  0x7b, 0x15, 0x89, 0x34, 0x6a, 0x83, 0x9c, 0xf0, 0xff, 0xaa, 0x05, 0x4f, 0xad, 0xb7, 0x9b, 0x95,
  0x58, 0x55, 0xcc, 0xd3, 0xf2, 0xb7, 0xef, 0xa1, 0x52, 0xb5, 0x1d, 0x23, 0x21, 0x05, 0x1f, 0x58,
  0xff, 0x03, 0x6b, 0x7f, 0x20, 0x7e, 0x9f, 0xd7, 0x01, 0x95, 0x8b, 0x77, 0x59, 0x6c, 0xeb, 0x12,
  0x58, 0xd9, 0x8e, 0xbb, 0x48, 0x6b, 0x84, 0xb1, 0xa5, 0x36, 0xe8, 0x8f, 0xb7, 0x0a, 0x44, 0x42,
  0x6d, 0x2c, 0x5d, 0x08, 0x61, 0xa9, 0xc3, 0x8c, 0xaf, 0xdb, 0xbd, 0xba, 0x0b, 0x61, 0xbc, 0x10,
  0x85, 0xef, 0x79, 0x6c, 0x09, 0x66, 0x4b, 0x73, 0xeb, 0x14, 0xe2, 0x31, 0x8d, 0x9e, 0xcc, 0x43,
  0xfa, 0x3e, 0xd6, 0xdd, 0x96, 0xb4, 0xb8, 0xd1,
};

const byte *iTunesPublicKey_N = &iTunesCert[0x152];

const byte iTunesPrivateKey_D[128] = {
  0x7f, 0x85, 0x08, 0x46, 0x3e, 0x23, 0xf1, 0x5f, 0x40, 0x4f, 0xeb, 0x9f, 0xf0, 0x99, 0x47, 0xc1,
  0x6e, 0x62, 0x2e, 0x1c, 0xdd, 0x7d, 0x6c, 0xb4, 0xa7, 0xe3, 0x99, 0x6c, 0xcc, 0x01, 0x6f, 0xaa,
  0x8a, 0xf3, 0xf3, 0x97, 0xc8, 0x1b, 0x2f, 0x41, 0xa4, 0x0a, 0xaa, 0x4c, 0x78, 0x99, 0xce, 0x8c,
  0x49, 0x09, 0xae, 0x8a, 0xfb, 0x9e, 0xb1, 0x48, 0x9a, 0xe3, 0x37, 0x52, 0xbc, 0x8f, 0xad, 0xae,
  0xc8, 0x52, 0x86, 0xdc, 0x6f, 0x04, 0x2d, 0xbd, 0x06, 0x1a, 0x6c, 0xef, 0x65, 0xab, 0x76, 0xf9,
  0x41, 0xaf, 0xf6, 0x63, 0x2d, 0x66, 0x9a, 0xee, 0xd5, 0xd9, 0x23, 0x31, 0x26, 0x3e, 0x68, 0x94,
  0xbe, 0x0d, 0x27, 0x69, 0xe4, 0x68, 0x5e, 0x1a, 0xca, 0x49, 0x77, 0xc0, 0x43, 0xe4, 0x45, 0x9b,
  0x26, 0xd0, 0xb4, 0x41, 0x2f, 0xfd, 0x7a, 0x55, 0xfb, 0xb1, 0x89, 0xea, 0x64, 0x3a, 0xcc, 0x19,
};

#endif

const byte unkCert[740] = {
  0x30, 0x82, 0x02, 0xe0, 0x30, 0x82, 0x02, 0x49, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0d, 0x33,
  0x33, 0xaf, 0x10, 0x05, 0x19, 0xaf, 0x00, 0x01, 0xaf, 0x00, 0x00, 0x01, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x7f, 0x31, 0x0b, 0x30,
  0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03,
  0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
  0x26, 0x30, 0x24, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20,
  0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x75,
  0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x33, 0x30, 0x31, 0x06, 0x03, 0x55, 0x04, 0x03,
  0x13, 0x2a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79,
  0x20, 0x41, 0x41, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
  0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d,
  0x31, 0x30, 0x30, 0x35, 0x31, 0x39, 0x30, 0x30, 0x31, 0x31, 0x35, 0x37, 0x5a, 0x17, 0x0d, 0x31,
  0x35, 0x30, 0x35, 0x31, 0x38, 0x30, 0x30, 0x31, 0x31, 0x35, 0x37, 0x5a, 0x30, 0x67, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06,
  0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e,
  0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x65,
  0x20, 0x46, 0x61, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x31, 0x2a, 0x30, 0x28, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x13, 0x21, 0x69, 0x54, 0x75, 0x6e, 0x65, 0x73, 0x2e, 0x33, 0x33, 0x33, 0x33, 0x41,
  0x46, 0x31, 0x30, 0x30, 0x35, 0x31, 0x39, 0x41, 0x46, 0x30, 0x30, 0x30, 0x31, 0x41, 0x46, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
  0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81,
  0x81, 0x00, 0xd4, 0xbf, 0xbb, 0xf8, 0x73, 0x48, 0x64, 0xf7, 0x8e, 0xe0, 0xd1, 0x3a, 0xc6, 0x73,
  0x1a, 0xef, 0x09, 0x09, 0x93, 0x70, 0x11, 0x90, 0xeb, 0x55, 0x85, 0x68, 0xc0, 0x5e, 0x9b, 0x9e,
  0xb2, 0xa6, 0x1f, 0x2f, 0xa1, 0x2a, 0x70, 0xdd, 0x24, 0xab, 0x2c, 0x76, 0xef, 0x22, 0x10, 0xcf,
  0xd3, 0x4f, 0x78, 0x91, 0xef, 0xa0, 0xf9, 0x03, 0x9f, 0x1a, 0x17, 0x25, 0xfd, 0xc7, 0x2e, 0x2c,
  0x8d, 0xd8, 0xb3, 0x04, 0x5f, 0x64, 0x37, 0x0f, 0x31, 0xd9, 0xb6, 0x02, 0xd6, 0x51, 0xc5, 0x4a,
  0x96, 0xfa, 0x0c, 0xff, 0xd2, 0xbf, 0x64, 0x33, 0x8a, 0xa8, 0x66, 0xba, 0xbe, 0xfe, 0x5f, 0x9e,
  0x27, 0xef, 0x55, 0x82, 0x4f, 0x90, 0x3a, 0x21, 0x04, 0xbd, 0x26, 0x96, 0x4e, 0x51, 0x86, 0x61,
  0x26, 0xdd, 0x0f, 0x70, 0xa5, 0x14, 0xb3, 0x45, 0x65, 0xf6, 0x22, 0x86, 0xf1, 0xbf, 0xa2, 0xe6,
  0x5d, 0x69, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x78, 0x30, 0x76, 0x30, 0x0e, 0x06, 0x03, 0x55,
  0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x03, 0xb8, 0x30, 0x0c, 0x06, 0x03, 0x55,
  0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
  0x04, 0x16, 0x04, 0x14, 0x8d, 0xef, 0x53, 0x01, 0x1e, 0x41, 0xb0, 0x64, 0x5c, 0xee, 0x4b, 0xd6,
  0xf1, 0x95, 0x66, 0x30, 0xfa, 0xc0, 0xc0, 0x92, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04,
  0x18, 0x30, 0x16, 0x80, 0x14, 0x56, 0xd9, 0x1d, 0x0a, 0x8c, 0x1b, 0x4e, 0xc8, 0x00, 0x8c, 0x59,
  0x51, 0x65, 0xbe, 0x9f, 0x9c, 0xa3, 0xe4, 0x2b, 0xf0, 0x30, 0x16, 0x06, 0x0a, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x63, 0x64, 0x07, 0x01, 0x01, 0x04, 0x08, 0x02, 0x03, 0x01, 0x00, 0x01, 0x01, 0x01,
  0x5e, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00,
  0x03, 0x81, 0x81, 0x00, 0x68, 0x42, 0xa6, 0xeb, 0xd4, 0x42, 0xbf, 0x28, 0x28, 0x6f, 0x35, 0xbe,
  0x2f, 0x9e, 0xef, 0x63, 0x47, 0x2f, 0x27, 0xba, 0x01, 0xff, 0xf6, 0x61, 0x43, 0xe6, 0xda, 0x3a,
  0xc8, 0x2a, 0x8e, 0x21, 0x03, 0xb2, 0x6e, 0xc4, 0x18, 0xea, 0x42, 0x93, 0x0e, 0x49, 0xbc, 0x07,
  0xfc, 0x4c, 0x57, 0x1f, 0x48, 0x16, 0x13, 0x15, 0xd3, 0x15, 0x14, 0x19, 0xd0, 0x23, 0xe2, 0xd8,
  0x13, 0x3a, 0xa6, 0x31, 0xd5, 0xd2, 0x6b, 0xdc, 0xf8, 0xa6, 0x47, 0x1e, 0xcf, 0x54, 0xbb, 0x4b,
  0x43, 0x73, 0xd6, 0xce, 0x1f, 0xb7, 0x61, 0x0d, 0x01, 0x6f, 0xbb, 0xa9, 0x53, 0x82, 0x48, 0xec,
  0x55, 0x39, 0x37, 0x3e, 0x06, 0x0b, 0x0a, 0x37, 0x3b, 0x84, 0x85, 0xa5, 0x39, 0x2d, 0x57, 0xac,
  0xd5, 0x98, 0x0b, 0xdf, 0x6b, 0xaa, 0xf8, 0xe5, 0xf8, 0x3e, 0xad, 0x31, 0x77, 0xcc, 0x4e, 0x22,
  0x23, 0xc3, 0x64, 0xf0,
};

void RSA(const byte *input, const byte *n, const byte *e, int e_len, byte *output) {
  BigUnsigned A = bigFromBuf(input, 128);
  BigUnsigned N = bigFromBuf(n, 128);
  BigUnsigned E = bigFromBuf(e, e_len);
  BigUnsigned B = modexp(A, E, N);
  bigToBuf(B, output, 128);
}

static uint64_t byteswap32(uint64_t x) {
  return (x << 24) + ((x & 0xff00) << 8) + ((x >> 8) & 0xff00) + (x >> 24);
}
static uint64_t byteswap64(uint64_t x) {
  return (x << 56) + ((x & 0xff00) << 40) + ((x & 0xff0000) << 24) + ((x & 0xff000000) << 8) + ((x >> 8) & 0xff000000) + ((x >> 24) & 0xff0000) + ((x >> 40) & 0xff00) + (x >> 56);
}

byte *YlCJ3lg;
byte *Zmdjk32jjoap;
uint64_t token8[2];
uint64_t token4;

void YlCJ3lg_call(uint64_t opcode, int nargs, uint64_t *args) {
  // build argument list
  byte info[100];
  memset(info, 0, 100);
  info[2] = 13; // padding size
  info[16] = nargs;
  info[17] = 0; // args processed so far
  int p = 18;
  for (int i = 0; i < nargs; i++) {
    uint64_t arg = args[i];
    int len = 0;
    while (arg) {
      len++;
      arg >>= 8;
    }
    info[p++] = len;
    while (len) {
      info[p++] = args[i] >> 8 * (len - 1);
      len--;
    }
  }
  info[0] = 0;
  info[1] = p;

  // build check array
  byte check[16];
  for (int i = 0; i < 16; i++) check[i] = info[i + 2];

  // final obfuscation
  *(uint64_t*)&info[6] ^= byteswap32(opcode);
  
  byte output[16];
  if (opcode != 0x86adbd76) log("calling YlCJ3lg/%x\n", opcode);
  uint64_t start = msec();
  int res = ((int(*)(uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t))YlCJ3lg)(
    (uint64_t)7,
    (uint64_t)token8[0],
    (uint64_t)token8[1],
    (uint64_t)opcode,
    (uint64_t)0,
    (uint64_t)check,
    (uint64_t)info,
    (uint64_t)output);
  if (opcode != 0x86adbd76) log("returning from YlCJ3lg/%x (%d ms)\n", opcode, msec() - start);
  if (res) error("YlCJ3lg/%x return: %x\n", opcode, res);
  
  // check output
  *(uint64_t*)&info[6] ^= byteswap32(opcode);
  if (info[0] != 0) error("bad info out %d\n", info[0]);
  int len = info[1];
  byte badresult[7] = {0x8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
  if (!memcmp(&info[len - 9], badresult, 7)) error("failed call %x - can iTunes play this file?\n", opcode);
}

void init(byte *mac_addr, char *keystoredir) {
  log("initializing\n");
#if WINDOWS
  HMODULE corefp = LoadLibrary("CoreFP.dll");
  if (!corefp) error("couldn't open CoreFP\n");
  byte *WIn9UJ86JKdV4dM = (byte*)GetProcAddress(corefp, "WIn9UJ86JKdV4dM");
  byte *X46O5IeS = (byte*)GetProcAddress(corefp, "X46O5IeS");
  YlCJ3lg = (byte*)GetProcAddress(corefp, "YlCJ3lg");
  Zmdjk32jjoap = NULL;
#else
  void *corefp = dlopen("CoreFP.i386", RTLD_LAZY);
  if (!corefp) error("couldn't open CoreFP\n");
  void *corefp1 = dlopen("CoreFP1.i386", RTLD_LAZY);
  if (!corefp1) error("couldn't open CoreFP1\n");
  byte *WIn9UJ86JKdV4dM = (byte*)dlsym(corefp, "WIn9UJ86JKdV4dM");
  byte *X46O5IeS = (byte*)dlsym(corefp, "X46O5IeS");
  YlCJ3lg = (byte*)dlsym(corefp, "YlCJ3lg");
  Zmdjk32jjoap = (byte*)dlsym(corefp1, "Zmdjk32jjoap");
#endif
  
  uint64_t two = 2;
  const byte *CoreFPCert;
  int CoreFPCertLen;
  byte encrypted_handshake[128];
  int res = ((int(*)(uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t,uint64_t))WIn9UJ86JKdV4dM)(
    (uint64_t)7,
    (uint64_t)token8,
    (uint64_t)&two,
    (uint64_t)iTunesCert,
    (uint64_t)iTunesCertLen,
    (uint64_t)encrypted_handshake,
    (uint64_t)&CoreFPCert,
    (uint64_t)&CoreFPCertLen);
  if (res) error("WIn9UJ86JKdV4dM return: %x\n", res);
  
  byte decrypted_handshake[128];
  RSA(encrypted_handshake, iTunesPublicKey_N, iTunesPrivateKey_D, 128, decrypted_handshake);
  
  // TODO: parse certificate to get offsets of public key components
  byte recrypted_handshake[128];
  RSA(decrypted_handshake, &CoreFPCert[0x154], &CoreFPCert[0x1d6], 3, recrypted_handshake);
  
  res = ((int(*)(uint64_t,uint64_t,uint64_t,uint64_t))X46O5IeS)(
    (uint64_t)7,
    (uint64_t)token8[0],
    (uint64_t)token8[1],
    (uint64_t)recrypted_handshake);
  if (res) error("X46O5IeS return: %x\n", res);
  
  // read sidb
  struct {
    uint64_t size;
    byte data[6];
  } mac = { 6 };
  memcpy(mac.data, mac_addr, 6);
  uint64_t args[5] = {1, 0, (uint64_t)&mac, (uint64_t)keystoredir, (uint64_t)&token4};
  YlCJ3lg_call(0xf4419e34, 5, args);
}

map<uint64_t, uint64_t> context_table;
void init_track(uint64_t track_id, byte *sinf, int sinf_size, byte *uuid, int uuid_size) {
  log("initializing track %u (sinf %d uuid %d)\n", (uint64_t)track_id, sinf_size, uuid_size);
  
  // build common args
  struct {
    uint64_t sinf_size;
    byte *sinf;
    uint64_t uuid_size;
    byte *uuid;
  } sinf_uuid = {sinf_size, sinf, uuid_size, uuid};
  byte random[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  struct {
    uint64_t len;
    byte *random;
    uint64_t one;
    uint64_t sinf_uuid;
  } args = {16, random, 1, (uint64_t)&sinf_uuid};
  
  // get challenge from DRM library
  byte *challenge;
  uint64_t challenge_len;
  uint64_t handle;
  uint64_t args1[6] = {1, token4, (uint64_t)&args, (uint64_t)&challenge, (uint64_t)&challenge_len, (uint64_t)&handle};
  YlCJ3lg_call(0x66eb8880, 6, args1);
  
  byte sha[20];
  SHA1Context sha1_ctx;
  SHA1Reset(&sha1_ctx);
  SHA1Input(&sha1_ctx, challenge + 4, 32);
  SHA1Input(&sha1_ctx, unkCert, 740);
  SHA1Result(&sha1_ctx);
  for (int i = 0; i < 20; i++) {
    sha[i] = sha1_ctx.Message_Digest[i/4] >> (24-i%4*8);
  }
  
  // build response
  byte response[32];
  for (int i = 0; i < 32; i++) response[i] = challenge[i + 4] ^ sha[i % 20];
  
  // encrypt response
#if WINDOWS
  byte key[16] = {0xaa,0xfa,0x28,0x29,0x24,0xf4,0x98,0xf6,0x83,0xd9,0xd5,0xf7,0x1f,0x25,0x9a,0x9f};
#else
  byte key[16] = {0x2a,0x95,0xd6,0xfc,0x65,0xac,0xf1,0x98,0x5e,0xa0,0x2d,0x44,0xcc,0xfe,0xa2,0x63};
#endif
  byte iv[16] = {0xd9,0x66,0x3a,0xae,0x05,0xe1,0xad,0xe4,0xcd,0x94,0x50,0x3a,0x19,0x47,0x47,0xe3};
  aes_context aes_ctx;
  aes_set_key(&aes_ctx, key, 128);
  aes_cbc_encrypt(&aes_ctx, response, response, 32, iv);
  
  byte response_wrapper[784];
  *(uint16_t*)(response_wrapper + 0) = 3;
  response_wrapper[2] = 0;
  response_wrapper[3] = 0;
  *(uint64_t*)(response_wrapper + 4) = 32;
  *(uint64_t*)(response_wrapper + 8) = 740;
  memcpy(response_wrapper + 12, response, 32);
  memcpy(response_wrapper + 44, unkCert, 740);
  
  // authenticate ourselves
  uint64_t args2[5] = {1, token4, (uint64_t)response_wrapper, 784, handle};
  YlCJ3lg_call(0xe02fb955, 5, args2);

  // get decryption context for track
  uint64_t track_context;
  uint64_t args3[8] = {4, token4, (uint64_t)&args, handle, 1, 1, 0, (uint64_t)&track_context};
  YlCJ3lg_call(0xa458f619, 8, args3);
  if (!track_context) error("track initialization failed\n");
  context_table[track_id] = track_context;
}

void decrypt(uint64_t track_id, uint64_t size, byte *data) {
  static bool patched = false;
  if (!patched) {
    // patch decryption code to prevent obfuscating result
    log("patching\n");
#if WINDOWS
    byte *patch_addr = YlCJ3lg + 4435188;
    DWORD old_protect;
    if (!VirtualProtect(patch_addr, 9, PAGE_EXECUTE_READWRITE, &old_protect)) error("VirtualProtect failed\n");
    patch_addr[0] = 0xb8;  // mov $0x20000000,%eax
    patch_addr[1] = 0;
    patch_addr[2] = 0;
    patch_addr[3] = 0;
    patch_addr[4] = 0x20;
    patch_addr[5] = 0x90; // nop
    patch_addr[6] = 0x90; // nop
    patch_addr[7] = 0x90; // nop
    patch_addr[8] = 0x90; // nop
#else
    byte *patch_addr = Zmdjk32jjoap + 3312425;
    size_t size;
    sysctlbyname("hw.machine", NULL, &size, NULL, 0);
    char *machine = new char();
    int pagesize = sysctlbyname("hw.machine", machine, &size, NULL, 0);

    int res = mprotect((void*)((uint64_t)patch_addr / pagesize * pagesize), 2 * pagesize, PROT_READ | PROT_WRITE | PROT_EXEC);
    if (res) error("mprotect failed %d\n", res);
    patch_addr[0] = 0xb8;  // mov $0x20000000,%eax
    patch_addr[1] = 0;
    patch_addr[2] = 0;
    patch_addr[3] = 0;
    patch_addr[4] = 0x20;
#endif
    patched = true;
    log("decrypting\n");
  }
  
  // decrypt data
  uint64_t track_context = context_table[track_id];
  uint64_t args[6] = {2, track_context, (uint64_t)data, size, (uint64_t)data, 0};
  YlCJ3lg_call(0x86adbd76, 6, args);
}

struct DecryptQueueEntry {
  uint64_t track_id;
  uint64_t size;
  byte *data;
};

int main(int argc, char *argv[]) {  
  log("starting\n");
  FILE *in = stdin;
  FILE *out = stdout;
#if WINDOWS
  // don't mess with my binary streams
  setmode(fileno(stdin), O_BINARY);
  setmode(fileno(stdout), O_BINARY);
#endif
  
  // for testing (use MakeTestFile to generate input file)
  if (argc > 1) {
    in = fopen(argv[1], "rb");
    if (argc > 2) {
      out = fopen(argv[2], "wb");
    }
  }
  
  vector<DecryptQueueEntry> decrypt_queue;
  
  while (true) {
    switch (fgetc(in)) {
      case 1: { // initialize
        byte mac_addr[6];
        fread(mac_addr, 6, 1, in);
        uint64_t keystoredir_size;
        fread(&keystoredir_size, 4, 1, in);
        keystoredir_size = byteswap32(keystoredir_size);
        char *keystoredir = (char*)malloc(keystoredir_size + 1);
        fread(keystoredir, keystoredir_size, 1, in);
        keystoredir[keystoredir_size] = 0;
        init(mac_addr, keystoredir);
        break;
      }
      case 2: { // initialize track
        uint64_t track_id;
        fread(&track_id, 8, 1, in);
        track_id = byteswap64(track_id);
        
        uint64_t sinf_size;
        fread(&sinf_size, 4, 1, in);
        sinf_size = byteswap32(sinf_size);
        byte *sinf = (byte*)malloc(sinf_size);
        fread(sinf, sinf_size, 1, in);
        
        uint64_t uuid_size;
        fread(&uuid_size, 4, 1, in);
        uuid_size = byteswap32(uuid_size);
        byte *uuid;
        if (uuid_size) {
          uuid = (byte*)malloc(uuid_size);
          fread(uuid, uuid_size, 1, in);
        } else {
          uuid = NULL;
        }
        
        init_track(track_id, sinf, sinf_size, uuid, uuid_size);
        break;
      }
      case 3: { // add to decrypt queue
        uint64_t track_id;
        fread(&track_id, 8, 1, in);
        track_id = byteswap64(track_id);
        
        uint64_t size;
        fread(&size, 4, 1, in);
        size = byteswap32(size);
        byte *data = (byte*)malloc(size);
        fread(data, size, 1, in);
        
        decrypt_queue.push_back((DecryptQueueEntry){track_id, size, data});
        break;
      }
      case 4: // run decrypt
        for (vector<DecryptQueueEntry>::const_iterator i = decrypt_queue.begin(); i < decrypt_queue.end(); ++i) {
          decrypt(i->track_id, i->size, i->data);
  
          // send decrypted data back to the java process
          fwrite(i->data, i->size, 1, out);
          free(i->data);
        }
        fflush(out);
        decrypt_queue.clear();
        break;
      case 5: // shutdown
        log("ending\n");
        exit(0);
        break;
    }
  }
}
